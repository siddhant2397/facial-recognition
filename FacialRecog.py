# -*- coding: utf-8 -*-
"""Untitled15.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Qjh5LiFSXKk8GqkDFlJGUkEMQkfjIOAi
"""

import streamlit as st
import numpy as np
from PIL import Image
import pymongo
from tensorflow import keras
import mtcnn
import cv2
from sklearn.preprocessing import Normalizer
from scipy.spatial.distance import cosine

# --- MongoDB Setup ---
mongo_client = pymongo.MongoClient("mongodb://localhost:27017/")
db = mongo_client["face_db"]
people = db["people"]  # Collection to store {name, embedding}

# --- Load Model and Utility Functions ---
model = keras.models.load_model('YOUR_MODEL_PATH')

def detect_face_mtcnn(img):
    detector = mtcnn.MTCNN()
    faces = detector.detect_faces(img)
    return faces

def get_face(img, box):
    x1, y1, width, height = box
    x1, y1 = abs(x1), abs(y1)
    x2 = x1 + width
    y2 = y1 + height
    return img[y1:y2, x1:x2]

def normalize_img(img):
    mean, std = img.mean(), img.std()
    return (img - mean) / std

def get_emb(face):
    face = normalize_img(face)
    face = cv2.resize(face, (160, 160))
    return model.predict(np.expand_dims(face, axis=0))[0]

def encode_face(image):
    img = np.array(image.convert('RGB'))
    faces = detect_face_mtcnn(img)
    if not faces:
        return None
    biggest = max(faces, key=lambda b: b['box'][2]*b['box'][3])
    face = get_face(img, biggest['box'])
    emb = get_emb(face)
    l2 = Normalizer()
    emb = l2.transform(emb.reshape(1, -1))[0]
    return emb

# --- Streamlit App ---
st.title("Face Recognition Access Control")

tab1, tab2 = st.tabs(["Enroll New Person", "Authorize Person"])

with tab1:
    st.header("Add New Person")
    name = st.text_input("Enter Name")
    uploaded_img = st.file_uploader("Upload Person's Photo", type=['jpg', 'jpeg', 'png'])
    if name and uploaded_img:
        img = Image.open(uploaded_img)
        emb = encode_face(img)
        if emb is not None:
            # Store only name and embedding
            people.insert_one({
                'name': name,
                'embedding': emb.tolist()
            })
            st.success(f"{name} added to database.")
        else:
            st.warning("No face detected in the image.")

with tab2:
    st.header("Authorize Person")
    test_img = st.file_uploader("Upload Image to Authorize", type=['jpg', 'jpeg', 'png'])
    if test_img:
        img = Image.open(test_img)
        emb = encode_face(img)
        if emb is not None:
            found = False
            min_dist = 1.0
            matched_name = "Unknown"
            for person in people.find():
                db_emb = np.array(person['embedding'])
                dist = cosine(emb, db_emb)
                if dist < 0.5 and dist < min_dist:  # Threshold can be adjusted
                    min_dist = dist
                    matched_name = person['name']
                    found = True
            if found:
                st.success(f"Access granted. Welcome, {matched_name}!")
            else:
                st.error("Access Denied: Unknown Person.")
        else:
            st.warning("No face detected in the uploaded image.")